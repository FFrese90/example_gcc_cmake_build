# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: [ubuntu-20.04]

    strategy:
      matrix:
        compiler: [gcc, clang]
        toolset: [14.0, 14.XX]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Cmake
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          mkdir build 
          cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/source
      
      # Build
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build
  
  build-win:
    # The type of runner that the job will run on
    runs-on: [windows-2019]
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Cmake
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          mkdir build 
          cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/source
      
      # Build
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build
